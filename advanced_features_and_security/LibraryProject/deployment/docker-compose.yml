# Docker Compose Configuration for Django HTTPS Deployment
# This configuration sets up a complete HTTPS-enabled Django application stack

version: '3.8'

services:
  # Django Application
  web:
    build: .
    container_name: django_library_app
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=LibraryProject.settings
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - django_network
    command: gunicorn --config deployment/gunicorn_https.py LibraryProject.wsgi:application

  # Nginx Reverse Proxy with HTTPS
  nginx:
    image: nginx:alpine
    container_name: django_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx_https.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/var/www/static
      - ./media:/var/www/media
      - ./ssl:/etc/nginx/ssl  # SSL certificates directory
    depends_on:
      - web
    networks:
      - django_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: django_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - django_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: django_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - django_network

  # SSL Certificate Management (Let's Encrypt)
  certbot:
    image: certbot/certbot
    container_name: django_certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d yourdomain.com -d www.yourdomain.com

volumes:
  postgres_data:
  redis_data:

networks:
  django_network:
    driver: bridge

# Environment variables file (.env)
# Create a .env file with the following variables:
# SECRET_KEY=your-secret-key-here
# POSTGRES_DB=django_library
# POSTGRES_USER=django_user
# POSTGRES_PASSWORD=your-secure-password
# DATABASE_URL=postgresql://django_user:your-secure-password@db:5432/django_library
# ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com,localhost
